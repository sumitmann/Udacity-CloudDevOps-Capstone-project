{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "EKS nodes (AMI family: AmazonLinux2, SSH access: false, private networking: false) [created and managed by eksctl]",
    "Mappings": {
      "ServicePrincipalPartitionMap": {
        "aws": {
          "EC2": "ec2.amazonaws.com",
          "EKS": "eks.amazonaws.com",
          "EKSFargatePods": "eks-fargate-pods.amazonaws.com"
        },
        "aws-cn": {
          "EC2": "ec2.amazonaws.com.cn",
          "EKS": "eks.amazonaws.com",
          "EKSFargatePods": "eks-fargate-pods.amazonaws.com"
        },
        "aws-us-gov": {
          "EC2": "ec2.amazonaws.com",
          "EKS": "eks.amazonaws.com",
          "EKSFargatePods": "eks-fargate-pods.amazonaws.com"
        }
      }
    },
    "Resources": {
      "EgressInterCluster": {
        "Type": "AWS::EC2::SecurityGroupEgress",
        "Properties": {
          "Description": "Allow control plane to communicate with worker nodes in group standard-workers (kubelet and workload TCP ports)",
          "DestinationSecurityGroupId": {
            "Ref": "SG"
          },
          "FromPort": 1025,
          "GroupId": {
            "Fn::ImportValue": "eksctl-capstonecluster-cluster::SecurityGroup"
          },
          "IpProtocol": "tcp",
          "ToPort": 65535
        }
      },
      "EgressInterClusterAPI": {
        "Type": "AWS::EC2::SecurityGroupEgress",
        "Properties": {
          "Description": "Allow control plane to communicate with worker nodes in group standard-workers (workloads using HTTPS port, commonly used with extension API servers)",
          "DestinationSecurityGroupId": {
            "Ref": "SG"
          },
          "FromPort": 443,
          "GroupId": {
            "Fn::ImportValue": "eksctl-capstonecluster-cluster::SecurityGroup"
          },
          "IpProtocol": "tcp",
          "ToPort": 443
        }
      },
      "IngressInterCluster": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "Description": "Allow worker nodes in group standard-workers to communicate with control plane (kubelet and workload TCP ports)",
          "FromPort": 1025,
          "GroupId": {
            "Ref": "SG"
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::ImportValue": "eksctl-capstonecluster-cluster::SecurityGroup"
          },
          "ToPort": 65535
        }
      },
      "IngressInterClusterAPI": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "Description": "Allow worker nodes in group standard-workers to communicate with control plane (workloads using HTTPS port, commonly used with extension API servers)",
          "FromPort": 443,
          "GroupId": {
            "Ref": "SG"
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::ImportValue": "eksctl-capstonecluster-cluster::SecurityGroup"
          },
          "ToPort": 443
        }
      },
      "IngressInterClusterCP": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "Description": "Allow control plane to receive API requests from worker nodes in group standard-workers",
          "FromPort": 443,
          "GroupId": {
            "Fn::ImportValue": "eksctl-capstonecluster-cluster::SecurityGroup"
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Ref": "SG"
          },
          "ToPort": 443
        }
      },
      "NodeGroup": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
          "DesiredCapacity": "2",
          "LaunchTemplate": {
            "LaunchTemplateName": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "Version": {
              "Fn::GetAtt": [
                "NodeGroupLaunchTemplate",
                "LatestVersionNumber"
              ]
            }
          },
          "MaxSize": "3",
          "MinSize": "1",
          "Tags": [
            {
              "Key": "Name",
              "PropagateAtLaunch": "true",
              "Value": "capstonecluster-standard-workers-Node"
            },
            {
              "Key": "kubernetes.io/cluster/capstonecluster",
              "PropagateAtLaunch": "true",
              "Value": "owned"
            }
          ],
          "VPCZoneIdentifier": {
            "Fn::Split": [
              ",",
              {
                "Fn::ImportValue": "eksctl-capstonecluster-cluster::SubnetsPublic"
              }
            ]
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MaxBatchSize": "1",
            "MinInstancesInService": "0"
          }
        }
      },
      "NodeGroupLaunchTemplate": {
        "Type": "AWS::EC2::LaunchTemplate",
        "Properties": {
          "LaunchTemplateData": {
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/xvda",
                "Ebs": {
                  "Encrypted": false,
                  "VolumeSize": 80,
                  "VolumeType": "gp2"
                }
              }
            ],
            "IamInstanceProfile": {
              "Arn": {
                "Fn::GetAtt": [
                  "NodeInstanceProfile",
                  "Arn"
                ]
              }
            },
            "ImageId": "ami-0313d49570831d7f4",
            "InstanceType": "t2.micro",
            "MetadataOptions": {
              "HttpPutResponseHopLimit": 2,
              "HttpTokens": "optional"
            },
            "NetworkInterfaces": [
              {
                "DeviceIndex": 0,
                "Groups": [
                  {
                    "Fn::ImportValue": "eksctl-capstonecluster-cluster::SharedNodeSecurityGroup"
                  },
                  {
                    "Ref": "SG"
                  }
                ]
              }
            ],
            "UserData": "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"
          },
          "LaunchTemplateName": {
            "Fn::Sub": "${AWS::StackName}"
          }
        }
      },
      "NodeInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [
            {
              "Ref": "NodeInstanceRole"
            }
          ]
        }
      },
      "NodeInstanceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "sts:AssumeRole"
                ],
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    {
                      "Fn::FindInMap": [
                        "ServicePrincipalPartitionMap",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "EC2"
                      ]
                    }
                  ]
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "ManagedPolicyArns": [
            {
              "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
            },
            {
              "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
            },
            {
              "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
            }
          ],
          "Path": "/",
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Sub": "${AWS::StackName}/NodeInstanceRole"
              }
            }
          ]
        }
      },
      "SG": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Communication between the control plane and worker nodes in group standard-workers",
          "Tags": [
            {
              "Key": "kubernetes.io/cluster/capstonecluster",
              "Value": "owned"
            },
            {
              "Key": "Name",
              "Value": {
                "Fn::Sub": "${AWS::StackName}/SG"
              }
            }
          ],
          "VpcId": {
            "Fn::ImportValue": "eksctl-capstonecluster-cluster::VPC"
          }
        }
      }
    },
    "Outputs": {
      "FeatureLocalSecurityGroup": {
        "Value": true
      },
      "FeaturePrivateNetworking": {
        "Value": false
      },
      "FeatureSharedSecurityGroup": {
        "Value": true
      },
      "InstanceProfileARN": {
        "Export": {
          "Name": {
            "Fn::Sub": "${AWS::StackName}::InstanceProfileARN"
          }
        },
        "Value": {
          "Fn::GetAtt": [
            "NodeInstanceProfile",
            "Arn"
          ]
        }
      },
      "InstanceRoleARN": {
        "Export": {
          "Name": {
            "Fn::Sub": "${AWS::StackName}::InstanceRoleARN"
          }
        },
        "Value": {
          "Fn::GetAtt": [
            "NodeInstanceRole",
            "Arn"
          ]
        }
      }
    }
  }